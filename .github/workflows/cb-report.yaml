name: CB-CI-REPORTS-WORKFLOW

on:
  workflow_run:
    workflows: ["CB-CI-ACTIONS-WORKFLOW"]
    types:
      - completed

jobs:
  cb-ci-reports-job:
    name: CB-CI-REPORTS-JOB
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
        run: |
          echo "workflow starting..."

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: Download cb-actions-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: cb-actions.yaml
          workflow_conclusion: success

      - name: Display structure of downloaded files
        run: ls -R ./cb-*

      - name: Load Result Info
        id: loadResultInfo
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log(context)
            var fs = require('fs');

            var prNumber = 0
            if (fs.existsSync('./cb-artifact/pr_number.txt')) {
              prNumber = Number(fs.readFileSync('./cb-artifact/pr_number.txt', 'utf8'))
            }
            console.log('prNumber', prNumber)
            core.setOutput('prNumber', prNumber)

            var deadcodelLintResultTxt = ''
            if (fs.existsSync('./cb-artifact/deadcode-lint-result.txt')) {
              deadcodelLintResultTxt = fs.readFileSync('./cb-artifact/deadcode-lint-result.txt', 'utf8')
            }
            console.log('deadcodelLintResultTxt', deadcodelLintResultTxt)  
            core.setOutput('deadcodelLintResultTxt', deadcodelLintResultTxt)

            var errchecklLintResultTxt = ''
            if (fs.existsSync('./cb-artifact/errcheck-lint-result.txt')) {
              errchecklLintResultTxt = fs.readFileSync('./cb-artifact/errcheck-lint-result.txt', 'utf8')
            }
            console.log('errchecklLintResultTxt', errchecklLintResultTxt)  
            core.setOutput('errchecklLintResultTxt', errchecklLintResultTxt) 

            var gofmtlLintResultTxt = ''
            if (fs.existsSync('./cb-artifact/gofmt-lint-result.txt')) {
              gofmtlLintResultTxt = fs.readFileSync('./cb-artifact/gofmt-lint-result.txt', 'utf8')
            }
            console.log('gofmtlLintResultTxt', gofmtlLintResultTxt)  
            core.setOutput('gofmtlLintResultTxt', gofmtlLintResultTxt)   

            var revivelLintResultTxt = ''
            if (fs.existsSync('./cb-artifact/revive-lint-result.txt')) {
              revivelLintResultTxt = fs.readFileSync('./cb-artifact/revive-lint-result.txt', 'utf8')
            }
            console.log('revivelLintResultTxt', revivelLintResultTxt)  
            core.setOutput('revivelLintResultTxt', revivelLintResultTxt)    

            var coverageCheck = 0
            if (fs.existsSync('./cb-artifact/coverage.check')) {
              coverageCheck = Number(fs.readFileSync('./cb-artifact/coverage.check', 'utf8'))
            }
            console.log('coverageCheck', coverageCheck)  
            core.setOutput('coverageCheck', coverageCheck)   

            var unitTestXml = ''
            if (fs.existsSync('./cb-artifact/unit-tests.xml')) {
              unitTestXml = fs.readFileSync('./cb-artifact/unit-tests.xml', 'utf8')
            }
            console.log('unitTestXml', unitTestXml)  
            core.setOutput('unitTestXml', unitTestXml)  

            var coverageErr = ''
            if (fs.existsSync('./cb-artifact/coverage.err')) {
              coverageErr = fs.readFileSync('./cb-artifact/coverage.err', 'utf8')
            }
            console.log('coverageErr', coverageErr) 
            core.setOutput('coverageErr', coverageErr)    

            var coverageTxt = ''
            if (fs.existsSync('./cb-artifact/coverage.txt')) {
              coverageTxt = fs.readFileSync('./cb-artifact/coverage.txt', 'utf8')
            }
            console.log('coverageTxt', coverageTxt) 
            core.setOutput('coverageTxt', coverageTxt)    

            var buildCheck = 0
            if (fs.existsSync('./cb-artifact-1.15/build.check.1.15')) {
              var buildCheckTmp = Number(fs.readFileSync('./cb-artifact-1.15/build.check.1.15', 'utf8'))
              console.log('buildCheck.1.15', buildCheckTmp)   
              if(buildCheckTmp != 0) buildCheck = 1
            }
            if (fs.existsSync('./cb-artifact-1.16/build.check.1.16')) {
              var buildCheckTmp = Number(fs.readFileSync('./cb-artifact-1.16/build.check.1.16', 'utf8'))
              console.log('buildCheck.1.16', buildCheckTmp)   
              if(buildCheckTmp != 0) buildCheck = 1
            }            
            console.log('buildCheck', buildCheck)   
            core.setOutput('buildCheck', buildCheck)   

            var buildErr = ''
            if (fs.existsSync('./cb-artifact-1.15/build.err.1.15')) {
              var buildCheckTmp = Number(fs.readFileSync('./cb-artifact-1.15/build.check.1.15', 'utf8'))
              if(buildCheckTmp == 0) {
                buildErr += '\nGolang 1.15 Build Success\n'
                buildErr += '------------------------------\n'
                buildErr += fs.readFileSync('./cb-artifact-1.15/build.err.1.15', 'utf8')
              } else {
                buildErr += '\nGolang 1.15 Build Error Raised\n'
                buildErr += '------------------------------\n'
                buildErr += fs.readFileSync('./cb-artifact-1.15/build.err.1.15', 'utf8')              
              }
            }
            if (fs.existsSync('./cb-artifact-1.16/build.err.1.16')) {
              var buildCheckTmp = Number(fs.readFileSync('./cb-artifact-1.16/build.check.1.16', 'utf8'))
              if(buildCheckTmp == 0) {
                buildErr += '\nGolang 1.16 Build Success\n'
                buildErr += '------------------------------\n'
                buildErr += fs.readFileSync('./cb-artifact-1.16/build.err.1.16', 'utf8')
              } else {
                buildErr += '\nGolang 1.16 Build Error Raised\n'
                buildErr += '------------------------------\n'
                buildErr += fs.readFileSync('./cb-artifact-1.16/build.err.1.16', 'utf8')           
              }
            }            
            console.log('buildErr', buildErr)   
            core.setOutput('buildErr', buildErr)

            var dockerBuildRun = 0
            var dockerBuildCheck = 0
            if (fs.existsSync('./cb-artifact-deploy/dockerbuild.check')) {
              dockerBuildRun = 1
              dockerBuildCheck = Number(fs.readFileSync('./cb-artifact-deploy/dockerbuild.check', 'utf8'))
            }
            console.log('dockerBuildRun', dockerBuildRun)   
            core.setOutput('dockerBuildRun', dockerBuildRun)             
            console.log('dockerBuildCheck', dockerBuildCheck)   
            core.setOutput('dockerBuildCheck', dockerBuildCheck)   

            var dockerBuildErr = ''
            if (fs.existsSync('./cb-artifact-deploy/dockerbuild.err')) {
              dockerBuildErr = fs.readFileSync('./cb-artifact-deploy/dockerbuild.err', 'utf8')
            }
            console.log('dockerBuildErr', dockerBuildErr)   
            core.setOutput('dockerBuildErr', dockerBuildErr)

            var publishRun = 0
            var publishCheck = 0
            if (fs.existsSync('./cb-artifact-deploy/ghcrpublish.check')) {
              publishRun = 1
              var publishCheckTmp = Number(fs.readFileSync('./cb-artifact-deploy/ghcrpublish.check', 'utf8'))
              console.log('ghcrPublishCheck', publishCheckTmp)   
              if(publishCheckTmp != 0) publishCheck = 1
            }
            if (fs.existsSync('./cb-artifact-deploy/dockerpublish.check')) {
              publishRun = 1
              var publishCheckTmp = Number(fs.readFileSync('./cb-artifact-deploy/dockerpublish.check', 'utf8'))
              console.log('dockerPublishCheck', publishCheckTmp)   
              if(publishCheckTmp != 0) publishCheck = 1
            }      
            console.log('publishRun', publishRun)   
            core.setOutput('publishRun', publishRun)                   
            console.log('publishCheck', publishCheck)   
            core.setOutput('publishCheck', publishCheck) 

            var publishErr = ''
            if (fs.existsSync('./cb-artifact-deploy/ghcrpublish.err')) {
              var publishCheckTmp = Number(fs.readFileSync('./cb-artifact-deploy/ghcrpublish.check', 'utf8'))
              if(publishCheckTmp == 0) {
                publishErr += '\nGitHub Container Registry Publish Success\n'
                publishErr += '------------------------------\n'
                publishErr += fs.readFileSync('./cb-artifact-deploy/ghcrpublish.err', 'utf8')
              } else {
                publishErr += '\nGitHub Container Registry Publish Error Raised\n'
                publishErr += '------------------------------\n'
                publishErr += fs.readFileSync('./cb-artifact-deploy/ghcrpublish.err', 'utf8')                
              }
            }
            if (fs.existsSync('./cb-artifact-deploy/dockerpublish.err')) {
              var publishCheckTmp = Number(fs.readFileSync('./cb-artifact-deploy/dockerpublish.check', 'utf8'))
              if(publishCheckTmp == 0) {
                publishErr += '\nDocker Hub Publish Success\n'
                publishErr += '------------------------------\n'
                publishErr += fs.readFileSync('./cb-artifact-deploy/dockerpublish.err', 'utf8')
              } else {
                publishErr += '\nDocker Hub Publish Error Raised\n'
                publishErr += '------------------------------\n'
                publishErr += fs.readFileSync('./cb-artifact-deploy/dockerpublish.err', 'utf8')           
              }
            }            
            console.log('publishErr', publishErr)   
            core.setOutput('publishErr', publishErr)      

            var summaryReport = '# Summary Result\n'

            deadcodeLintCnt = (deadcodelLintResultTxt.match(/(deadcode)/g) || []).length
            console.log('deadcodeLintCnt', deadcodeLintCnt) 
            core.setOutput('deadcodeLintCnt', deadcodeLintCnt)  
            summaryReport += '- deadcode(lint) : ' + deadcodeLintCnt + ' found\n'

            errcheckLintCnt = (errchecklLintResultTxt.match(/(errcheck)/g) || []).length
            console.log('errcheckLintCnt', errcheckLintCnt) 
            core.setOutput('errcheckLintCnt', errcheckLintCnt)  
            summaryReport += '- errcheck(lint) : ' + errcheckLintCnt + ' found\n'    

            gofmtLintCnt = (gofmtlLintResultTxt.match(/(gofmt)/g) || []).length
            console.log('gofmtLintCnt', gofmtLintCnt) 
            core.setOutput('gofmtLintCnt', gofmtLintCnt)  
            summaryReport += '- gofmt(lint) : ' + gofmtLintCnt + ' found\n'       

            reviveLintCnt = (revivelLintResultTxt.match(/(revive)/g) || []).length
            console.log('reviveLintCnt', reviveLintCnt) 
            core.setOutput('reviveLintCnt', reviveLintCnt)  
            summaryReport += '- revive(lint) : ' + reviveLintCnt + ' found\n'                               

            var coverageTotal = '-'
            if (fs.existsSync('./cb-artifact/coverage.total')) {
              coverageTotal = fs.readFileSync('./cb-artifact/coverage.total', 'utf8')
              coverageTotal = coverageTotal.trim()
              if(coverageTotal == '') coverageTotal = '-'
            }
            console.log('coverageTotal', coverageTotal) 
            core.setOutput('coverageTotal', coverageTotal)  
            summaryReport += '- coverage total : ' + coverageTotal + '\n'

            var testCaseAllCnt = 0
            const regexTests = /tests="(.*?)"/g;
            while (current = regexTests.exec(unitTestXml)) {
              testCaseAllCnt += Number(current.pop())
            }
            var testCaseFailCnt = 0
            const regexFailures = /failures="(.*?)"/g;
            while (current = regexFailures.exec(unitTestXml)) {
              testCaseFailCnt += Number(current.pop())
            }
            console.log('testCaseAllCnt', testCaseAllCnt) 
            core.setOutput('testCaseAllCnt', testCaseAllCnt)  
            console.log('testCaseFailCnt', testCaseFailCnt) 
            core.setOutput('testCaseFailCnt', testCaseFailCnt)  
            summaryReport += '- junt test : ' + testCaseAllCnt + ' tests, ' + testCaseFailCnt + ' failure\n'

            if(buildCheck != 0) {
              summaryReport += '- go build : fail\n'
            } else {
              summaryReport += '- go build : success\n'
            }

            if(dockerBuildRun == 1) {
              if(dockerBuildCheck != 0) {
                summaryReport += '- docker build : fail\n'
              } else {
                summaryReport += '- docker build : success\n'
              }   
            } else {
              summaryReport += '- docker build : -\n'
            }

            if(publishRun == 1) {
              if(publishCheck != 0) {
                summaryReport += '- deploy : fail\n'
              } else {
                summaryReport += '- deploy : success\n'
              }   
            } else {
              summaryReport += '- deploy : -\n'
            }       

            var dateObj = new Date()
            var year = dateObj.getFullYear()
            var month = ('0' + (dateObj.getMonth() + 1)).slice(-2)
            var date = ('0' + dateObj.getDate()).slice(-2)

            var reportPath = 'cb-publish/' + context.payload.repository.name + '/' + context.payload.workflow_run.head_branch + '/' + year + '/' + month + '/' + date

            !fs.existsSync(reportPath) && fs.mkdirSync(reportPath, { recursive: true })

            summaryReport += '\n'
            summaryReport += '<a href="https://jmleefree.github.io/pagetest1/index.html?info=' + reportPath + '/' + context.sha + '.json" target="_blank" rel="noopener">[details]</a>\n'

            console.log('summaryReport', summaryReport)   
            core.setOutput('summaryReport', summaryReport)

            var publishReport = {}
            publishReport.version = '1.0'
            publishReport.lint = {}
            publishReport.lint.deadcode = {}
            publishReport.lint.deadcode.cnt = deadcodeLintCnt
            publishReport.lint.deadcode.details = deadcodelLintResultTxt   
            publishReport.lint.errcheck = {}
            publishReport.lint.errcheck.cnt = errcheckLintCnt
            publishReport.lint.errcheck.details = errchecklLintResultTxt   
            publishReport.lint.gofmt = {}
            publishReport.lint.gofmt.cnt = gofmtLintCnt
            publishReport.lint.gofmt.details = gofmtlLintResultTxt      
            publishReport.lint.revive = {}
            publishReport.lint.revive.cnt = reviveLintCnt
            publishReport.lint.revive.details = revivelLintResultTxt    
            publishReport.test = {}      
            publishReport.test.unit = {}   
            publishReport.test.unit.check = coverageCheck     
            publishReport.test.unit.details = coverageErr 
            publishReport.test.unit.allCnt = testCaseAllCnt 
            publishReport.test.unit.failCnt = testCaseFailCnt 
            publishReport.test.coverage = {}
            publishReport.test.coverage.check = coverageCheck     
            publishReport.test.coverage.details = coverageErr     
            publishReport.test.coverage.total = coverageTotal     
            publishReport.build = {}
            publishReport.build.check = buildCheck     
            publishReport.build.details = buildErr     
            publishReport.deploy = {}
            publishReport.deploy.dockerBuild = {}
            publishReport.deploy.dockerBuild.run = dockerBuildRun
            publishReport.deploy.dockerBuild.check = dockerBuildCheck
            publishReport.deploy.dockerBuild.details = dockerBuildErr
            publishReport.deploy.publish = {}
            publishReport.deploy.publish.run = publishRun
            publishReport.deploy.publish.check = publishCheck
            publishReport.deploy.publish.details = publishErr

            fs.writeFileSync(reportPath + '/' + context.sha + '.json', JSON.stringify(publishReport), 'utf8');
            fs.copyFileSync('./cb-artifact/coverage.html', reportPath + '/' + context.sha + '.html')

      - name: Publish generated content to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.REPO_ACCESS_TOKEN }}
          external_repository: jmleefree/pagetest1
          publish_branch: main
          publish_dir: ./cb-publish
          destination_dir: ./cb-publish
          keep_files: true
          enable_jekyll: false
          full_commit_message: "test result commit"

      - name: Publish Summary Results(PR)
        if: ${{ github.event.workflow_run.event == 'pull_request' }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ steps.loadResultInfo.outputs.prNumber }}
          body: |
            ${{ steps.loadResultInfo.outputs.summaryReport }}

      - name: Publish Summary Results(Push)
        if: ${{ github.event.workflow_run.event == 'push' }}
        uses: peter-evans/commit-comment@v1
        with:
          body: |
            ${{ steps.loadResultInfo.outputs.summaryReport }}